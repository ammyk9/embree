## Copyright 2022 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

name: continuous

on: [push, workflow_dispatch]

jobs:
  ####################################################################
  # Setup dpcpp and gfx if not already on NAS
  ####################################################################
  setup_dpcpp:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/embree_docker.yml@devel
    with:
      image: embree/ubuntu:22.04
      runs-on: '[ "Linux", "docker", "build" ]'
      cmd: |
        DPCPP_VERSION=$(cat .github/workflows/dpcpp-sycl-nightly.env | grep DPCPP_VERSION | sed 's/.*=//')
        echo "Setup DPCPP ${DPCPP_VERSION}"
        ./scripts/download_dpcpp.sh ${DPCPP_VERSION} ${NAS_LINUX}/dpcpp-compiler-linux LINUX ${PUBLIC_GITHUB_TOKEN}
        ./scripts/download_dpcpp.sh ${DPCPP_VERSION} ${NAS_LINUX}/dpcpp-compiler-win WIN ${PUBLIC_GITHUB_TOKEN}

  setup_gfx:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/embree_docker.yml@devel
    with:
      image: embree/ubuntu:22.04
      runs-on: '[ "Linux", "docker", "build" ]'
      cmd: |
        GFX_DRIVER_VERSION=$(cat .github/workflows/gfx-ubuntu22-embargo.env | grep GFX_DRIVER_VERSION | sed 's/.*=//')
        echo "Setup embargo GFX driver ${GFX_DRIVER_VERSION} for Linux"
        ./scripts/download_gfx.sh ${GFX_DRIVER_VERSION} ${NAS_LINUX}/gfx-driver-linux/ ${ARTIFACTORY_TOKEN}

        GFX_DRIVER_VERSION=$(cat .github/workflows/gfx-ubuntu22-internal.env | grep GFX_DRIVER_VERSION | sed 's/.*=//')
        echo "Setup internal GFX driver ${GFX_DRIVER_VERSION} for Linux"
        ./scripts/download_gfx.sh ${GFX_DRIVER_VERSION} ${NAS_LINUX}/gfx-driver-linux/ ${ARTIFACTORY_TOKEN}

        GFX_DRIVER_VERSION=$(cat .github/workflows/gfx-ubuntu22-public.env | grep GFX_DRIVER_VERSION | sed 's/.*=//')
        echo "Setup public GFX driver ${GFX_DRIVER_VERSION} for Linux"
        ./scripts/download_gfx.sh ${GFX_DRIVER_VERSION} ${NAS_LINUX}/gfx-driver-linux/ ${ARTIFACTORY_TOKEN}

        GFX_DRIVER_VERSION=$(cat .github/workflows/gfx-ubuntu22-release.env | grep GFX_DRIVER_VERSION | sed 's/.*=//')
        echo "Setup release GFX driver ${GFX_DRIVER_VERSION} for Linux"
        ./scripts/download_gfx.sh ${GFX_DRIVER_VERSION} ${NAS_LINUX}/gfx-driver-linux/ ${ARTIFACTORY_TOKEN}

        GFX_DRIVER_VERSION=$(cat .github/workflows/gfx-windows-internal.env | grep GFX_DRIVER_VERSION | sed 's/.*=//')
        echo "Setup internal GFX driver ${GFX_DRIVER_VERSION} for Windows"
        ./scripts/download_gfx.sh ${GFX_DRIVER_VERSION} ${NAS_LINUX}/gfx-driver-win/ ${ARTIFACTORY_TOKEN}

        GFX_DRIVER_VERSION=$(cat .github/workflows/gfx-windows-public.env | grep GFX_DRIVER_VERSION | sed 's/.*=//')
        echo "Setup public GFX driver ${GFX_DRIVER_VERSION} for Windows"
        ./scripts/download_gfx.sh ${GFX_DRIVER_VERSION} ${NAS_LINUX}/gfx-driver-win/ ${ARTIFACTORY_TOKEN}

        GFX_DRIVER_VERSION=$(cat .github/workflows/gfx-windows-release.env | grep GFX_DRIVER_VERSION | sed 's/.*=//')
        echo "Setup release GFX driver ${GFX_DRIVER_VERSION} for Windows"
        ./scripts/download_gfx.sh ${GFX_DRIVER_VERSION} ${NAS_LINUX}/gfx-driver-win/ ${ARTIFACTORY_TOKEN}

  ################################################################################
  ################################################################################
  # GPU tests
  ################################################################################
  ###############################################################################

  ########################################
  # Linux DG2
  ########################################
  
  linux-DG2-JIT-INTERNAL:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: [setup_gfx, setup_dpcpp]
    with:
      image: embree/ubuntu:22.04
      runs-on: '[ "Linux", "docker", "build" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-internal.env
      artifact-out: linux-DG2-JIT-INTERNAL
      artifact-path: ./build .ctest_conf
      cmd: |
        scripts/test.py configure platform:x64 compiler:dpcpp ispc:ispc1.18.1 isa:SSE2 build:RelWithAssert EMBREE_SYCL_SUPPORT:ON LEVEL_ZERO:ON sycl:none tasking:TBB2021.7.0 intensity:4
        scripts/test.py build --debug
        scripts/test.py build

  linux-DG2-JIT-INTERNAL-test:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: ["linux-DG2-JIT-INTERNAL"]
    with:
      image: embree/ubuntu:22.04
      options: --device=/dev/dri:/dev/dri
      runs-on: '[ "Linux", "docker", "dg2" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-internal.env
      artifact-in: linux-DG2-JIT-INTERNAL
      cmd: |
        scripts/test.py test --debug
        scripts/test.py test

  linux-DG2-JIT-PUBLIC:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: [setup_gfx, setup_dpcpp]
    with:
      image: embree/ubuntu:22.04
      runs-on: '[ "Linux", "docker", "build" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-public.env
      artifact-out: linux-DG2-JIT-PUBLIC
      artifact-path: ./build .ctest_conf
      cmd: |
        scripts/test.py configure platform:x64 compiler:dpcpp ispc:ispc1.18.1 isa:SSE2 build:RelWithAssert EMBREE_SYCL_SUPPORT:ON sycl:none tasking:TBB2021.7.0 intensity:4
        scripts/test.py build --debug
        scripts/test.py build

  linux-DG2-JIT-PUBLIC-test:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: ["linux-DG2-JIT-PUBLIC"]
    with:
      image: embree/ubuntu:22.04
      options: --device=/dev/dri:/dev/dri
      runs-on: '[ "Linux", "docker", "dg2" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-public.env
      artifact-in: linux-DG2-JIT-PUBLIC
      cmd: |
        scripts/test.py test --debug
        scripts/test.py test

  linux-DG2-JIT-EMBARGO:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: [setup_gfx, setup_dpcpp]
    with:
      image: embree/ubuntu:22.04
      runs-on: '[ "Linux", "docker", "build" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-embargo.env
      artifact-out: linux-DG2-JIT-EMBARGO
      artifact-path: ./build .ctest_conf
      cmd: |
        scripts/test.py configure platform:x64 compiler:dpcpp ispc:ispc1.18.1 isa:SSE2 build:RelWithAssert EMBREE_SYCL_SUPPORT:ON sycl:none tasking:TBB2021.7.0 intensity:4
        scripts/test.py build --debug
        scripts/test.py build

  linux-DG2-JIT-GPU-BVH-BUILDER:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: [setup_gfx, setup_dpcpp]
    with:
      image: embree/ubuntu:22.04
      runs-on: '[ "Linux", "docker", "build" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-embargo.env
      artifact-out: linux-DG2-JIT-GPU-BVH-BUILDER
      artifact-path: ./build .ctest_conf
      cmd: |
        scripts/test.py configure platform:x64 compiler:dpcpp ispc:ispc1.18.1 isa:SSE2 build:RelWithAssert EMBREE_SYCL_SUPPORT:ON LEVEL_ZERO:OFF EMBREE_SYCL_GPU_BVH_BUILDER:ON USERGEOM:CONTEXT FILTER_FUNCTION:CONTEXT gfx:EMBARGO sycl:none tasking:TBB2021.7.0 intensity:4
        scripts/test.py build --debug
        scripts/test.py build

  linux-DG2-JIT-PUBLIC-GPU-BVH-BUILDER:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: [setup_gfx, setup_dpcpp]
    with:
      image: embree/ubuntu:22.04
      runs-on: '[ "Linux", "docker", "build" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-public.env
      artifact-out: linux-DG2-JIT-PUBLIC-GPU-BVH-BUILDER
      artifact-path: ./build .ctest_conf
      cmd: |
        scripts/test.py configure platform:x64 compiler:dpcpp ispc:ispc1.18.1 isa:SSE2 build:RelWithAssert EMBREE_SYCL_SUPPORT:ON LEVEL_ZERO:OFF EMBREE_SYCL_GPU_BVH_BUILDER:ON USERGEOM:CONTEXT FILTER_FUNCTION:CONTEXT sycl:none tasking:TBB2021.7.0 intensity:4
        scripts/test.py build --debug
        scripts/test.py build


 # linux-DG2-AOT-INTERNAL-test:
 #   secrets: inherit
 #   uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
 #   needs: ["linux-DG2-AOT-INTERNAL"]
 #   with:
 #     image: embree/ubuntu:22.04
 #     options: --device=/dev/dri:/dev/dri
 #     runs-on: '[ "Linux", "docker", "dg2" ]'
 #     project: embree
 #     env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-internal.env
 #     artifact-in: linux-DG2-AOT-INTERNAL
 #     cmd: |
 #       scripts/test.py test --debug
 #       scripts/test.py test

  linux-DG2-JIT-PUBLIC-ICX:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: [setup_gfx, setup_dpcpp]
    with:
      image: embree/ubuntu:22.04
      runs-on: '[ "Linux", "docker", "build" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-none.env ./.github/workflows/gfx-ubuntu22-public.env
      artifact-out: linux-DG2-JIT-PUBLIC-ICX
      artifact-path: ./build .ctest_conf
      cmd: |
        scripts/test.py configure platform:x64 compiler:ICX2023.0.0 ispc:ispc1.18.1 isa:AVX512 build:RelWithAssert EMBREE_SYCL_SUPPORT:ON sycl:none tasking:TBB2021.7.0 intensity:4
        scripts/test.py build --debug
        scripts/test.py build

  linux-DG2-JIT-PUBLIC-ICX-test:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: ["linux-DG2-JIT-PUBLIC-ICX"]
    with:
      image: embree/ubuntu:22.04
      options: --device=/dev/dri:/dev/dri
      runs-on: '[ "Linux", "docker", "dg2" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-none.env ./.github/workflows/gfx-ubuntu22-public.env
      artifact-in: linux-DG2-JIT-PUBLIC-ICX
      cmd: |
        scripts/test.py test --debug
        scripts/test.py test

  ########################################
  # Linux ATS-M
  ########################################

  linux-ATSM-JIT-PUBLIC-test:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: ["linux-DG2-JIT-PUBLIC"]
    with:
      image: embree/ubuntu:22.04
      options: --device=/dev/dri:/dev/dri
      runs-on: '[ "Linux", "docker", "atsm" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-public.env
      artifact-in: linux-DG2-JIT-PUBLIC
      cmd: |
        scripts/test.py test --debug
        scripts/test.py test


  ########################################
  # Linux PVC
  ########################################

  linux-PVC-JIT-INTERNAL:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: [setup_gfx, setup_dpcpp]
    with:
      image: embree/ubuntu:22.04
      runs-on: '[ "Linux", "docker", "build" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-embargo.env
      artifact-out: linux-PVC-JIT-INTERNAL
      artifact-path: ./build .ctest_conf
      cmd: |
        scripts/test.py configure platform:x64 compiler:dpcpp ispc:ispc1.16.1 isa:SSE2 build:RelWithAssert EMBREE_SYCL_SUPPORT:ON sycl:none tasking:TBB intensity:4
        scripts/test.py build --debug
        scripts/test.py build

  linux-PVC-1T-JIT-INTERNAL-test:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: ["linux-PVC-JIT-INTERNAL"]
    with:
      image: embree/ubuntu:22.04
      options: --device=/dev/dri:/dev/dri
      runs-on: '[ "Linux", "docker", "pvc" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-embargo.env
      artifact-in: linux-PVC-JIT-INTERNAL
      cmd: |
        export EnableImplicitScaling=0
        scripts/test.py test --debug
        scripts/test.py test

  linux-PVC-2T-JIT-INTERNAL-test:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@devel
    needs: ["linux-PVC-JIT-INTERNAL"]
    with:
      image: embree/ubuntu:22.04
      options: --device=/dev/dri:/dev/dri
      runs-on: '[ "Linux", "docker", "pvc" ]'
      project: embree
      env-from-files: ./.github/workflows/dpcpp-sycl-nightly.env ./.github/workflows/gfx-ubuntu22-embargo.env
      artifact-in: linux-PVC-JIT-INTERNAL
      cmd: |
        export EnableImplicitScaling=1
        scripts/test.py test --debug
        scripts/test.py test

#  linux-PVC-JIT-PUBLIC:
#    secrets: inherit
#    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/embree_docker.yml@devel
#    needs: [setup_gfx, setup_dpcpp]
#    with:
#      image: embree/ubuntu:22.04
#      runs-on: '[ "Linux", "docker", "build" ]'
#      artifact-out: linux-PVC-JIT-PUBLIC
#      artifact-path: ./build .ctest_conf
#      cmd: |
#        scripts/test.py configure platform:x64 compiler:dpcpp ispc:ispc1.16.1 isa:SSE2 build:RelWithAssert EMBREE_SYCL_SUPPORT:ON sycl:none tasking:TBB intensity:4
#        scripts/test.py build --debug
#        scripts/test.py build
#
#  linux-PVC-JIT-PUBLIC-test:
#    secrets: inherit
#    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/embree_docker.yml@devel
#    needs: ["linux-PVC-JIT-PUBLIC"]
#    with:
#      image: embree/ubuntu:22.04
#      options: --device=/dev/dri:/dev/dri
#      runs-on: '[ "Linux", "docker", "pvc" ]'
#      artifact-in: linux-PVC-JIT-PUBLIC
#      cmd: |
#        scripts/test.py test --debug
#        scripts/test.py test


  ########################################
  # Windows DG2
  ########################################

  ################################################################################
  ################################################################################
  # CPU tests
  ################################################################################
  ################################################################################

  ########################################
  # Linux
  ########################################


  linux-ubuntu20_04-GCC-NAMESPACE:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/embree_docker.yml@devel
    with:
      image: embree/ubuntu:20.04
      runs-on: '[ "Linux", "docker", "build" ]'
      cmd: |
        python scripts/test.py configure platform:x64 build:Debug compiler:GCC ispc:ispc1.12.0 isa:AVX2 frequency_level:simd256 tasking:TBB intensity:1 api_namespace:myembree
        python scripts/test.py build
        python scripts/test.py test

  linux-ubuntu20_04-ICX:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/embree_docker.yml@devel
    with:
      image: embree/ubuntu:20.04
      runs-on: '[ "Linux", "docker", "avx512" ]'
      cmd: |
        python scripts/test.py configure platform:x64 build:Release threads:4 compiler:ICX2023.0.0 ispc:ispc1.17.0 isa:AVX512 frequency_level:simd256 tasking:TBB2021.5.0 intensity:2
        python scripts/test.py build
        python scripts/test.py test

  linux-centos7_4-GCC:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/embree_docker.yml@devel
    with:
      image: embree/centos:7.4
      runs-on: '[ "Linux", "docker", "build" ]'
      cmd: |
        python scripts/test.py configure platform:x64 build:Debug compiler:GCC ispc:ispc1.17.0 isa:AVX2 frequency_level:simd128 tasking:TBB intensity:1
        python scripts/test.py build
        python scripts/test.py test


  ########################################
  # Windows
  ########################################

  ################################################################################
  ################################################################################
  # CPU tests
  ################################################################################
  ################################################################################


  ########################################
  # MacOS
  ########################################


  ########################################
  # Klockwork
  ########################################

  linux-GCC-KLOCWORK:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/embree_static_analysis.yml@devel
    with:
      image: embree/centos:7.4
      runs-on: '[ "Linux", "docker", "build" ]'
      cmd: |
        export CI_PROJECT_DIR=$GITHUB_WORKSPACE
        export CI_JOB_ID=$GITHUB_RUN_ID
        python scripts/test.py configure platform:x64 build:Debug compiler:GCC ispc:ispc1.17.0 isa:SSE2 tasking:TBB klocwork:ON intensity:0
        python scripts/test.py build
        python scripts/test.py test
        scripts/klocwork_gen_report.sh
        scripts/store_files.sh $GITHUB_REPOSITORY $GITHUB_RUN_ID klocwork "klocwork/report.log"

  success:
    runs-on: ubuntu-latest
    needs:
      - linux-DG2-JIT-INTERNAL-test
      - linux-DG2-JIT-PUBLIC-test
      - linux-ATSM-JIT-PUBLIC-test
      - linux-DG2-JIT-EMBARGO
      - linux-DG2-JIT-PUBLIC-ICX-test
      - linux-PVC-1T-JIT-INTERNAL-test
      - linux-PVC-2T-JIT-INTERNAL-test
      - linux-ubuntu20_04-GCC-NAMESPACE
      - linux-ubuntu20_04-ICX
      - linux-centos7_4-GCC
      - linux-GCC-KLOCWORK
    if: failure() || cancelled()
    steps:
      - name: Failure
        run: |
          echo "::notice title=Success::Workflow failed"
          exit 1

